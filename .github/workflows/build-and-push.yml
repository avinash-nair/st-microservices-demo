name: Build and Push Docker Images

on:
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

env:
  AZURE_REGION: 'australiaeast'
  ACR_NAME: 'skilltechregistry'
  RESOURCE_GROUP_NAME: 'microservices-demo-rg'
  AKS_CLUSTER_NAME: 'microservices-demo-aks'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60  
    strategy:
      matrix:
        service:
          - src/adservice
          - src/cartservice/src
          - src/checkoutservice
          - src/currencyservice
          - src/emailservice
          - src/frontend
          - src/loadgenerator
          - src/paymentservice
          - src/productcatalogservice
          - src/recommendationservice
          - src/shippingservice
          - src/shoppingassistantservice
    outputs:
      images: ${{ steps.set-images-output.outputs.images }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Verify Azure CLI installation
        run: |
          az --version

      - name: Log in to Azure
        uses: azure/login@v1.4.7
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Build and push Docker image
        run: |
          DOCKERFILE_PATH=${{ matrix.service }}
          if [ ! -f "$DOCKERFILE_PATH/Dockerfile" ]; then
            DOCKERFILE_PATH=${{ matrix.service }}/src
          fi

          if [ ! -f "$DOCKERFILE_PATH/Dockerfile" ]; then
            echo "Error: Dockerfile not found in $DOCKERFILE_PATH"
            exit 1
          fi

          cd $DOCKERFILE_PATH

          if [ "${{ matrix.service }}" == "src/cartservice/src" ]; then
            IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/cartservice
          else
            IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/$(basename ${{ matrix.service }})
          fi

          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest

      - id: set-images-output
        run: echo "images=$(echo ${{ matrix.service }} | sed 's/src\///g' | sed 's/\/src//g')" >> $GITHUB_OUTPUT

      - name: Azure CLI logout
        run: |
          az logout

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: build-and-push  
    env:
      AZURE_REGION: 'australiaeast'
      ACR_NAME: 'skilltechregistry'
      RESOURCE_GROUP_NAME: 'microservices-demo-rg'
      AKS_CLUSTER_NAME: 'microservices-demo-aks'
      AKS_NAMESPACE: 'default'
    steps:
      - name: Checkout code 
        uses: actions/checkout@v3

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Verify Azure CLI installation
        run: |
          az --version

      - name: Log in to Azure
        uses: azure/login@v1.4.7
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials (if needed for private ACR)
        run: |
          az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.AKS_CLUSTER_NAME }}

      - name: Deploy using general Kubernetes manifest
        run: |
          echo "Deploying all services using release/kubernetes-manifests.yaml"
          kubectl apply -f release/kubernetes-manifests.yaml

      - name: Update images in AKS
        run: |
          for service in ${{ needs.build-and-push.outputs.images }}; do
            echo "Updating image for $service"
            if [ "$service" == "cartservice" ]; then
              kubectl set image deployment/cartservice server=skilltechregistry.azurecr.io/cartservice:latest --namespace ${{ env.AKS_NAMESPACE }}
            else
              kubectl set image deployment/$service $service=skilltechregistry.azurecr.io/$service:latest --namespace ${{ env.AKS_NAMESPACE }}
            fi
            echo "Updated $service"
          done

      - name: Azure CLI logout
        run: |
          az logout
